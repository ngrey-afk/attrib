from pathlib import Path
from transformers import pipeline

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
PROMPT_FILE = Path("prompts/prompt_en.txt")
if PROMPT_FILE.exists():
    PROMPT_TEMPLATE = PROMPT_FILE.read_text(encoding="utf-8").strip()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ {PROMPT_FILE}")
else:
    # fallback ‚Äî –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    PROMPT_TEMPLATE = (
        "You are a bot that helps me describe images and videos for stock websites. "
        "Create an English description (max 200 characters) and exactly 49 keywords."
    )
    print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ñ–∞–π–ª prompt_en.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback-–ø—Ä–æ–º–ø—Ç!")

# –ó–∞–≥—Ä—É–∂–∞–µ–º LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
generator = pipeline("text-generation", model="microsoft/phi-3-mini-4k-instruct")


def generate_keywords_with_prompt(prompt: str, caption: str, **kwargs) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏ caption –æ—Ç BLIP.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: {"title": ..., "description": ..., "keywords": [...]}
    """
    full_prompt = f"{PROMPT_TEMPLATE}\n\nImage/Video content: {caption}\n\n{prompt.strip()}"

    print("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å...")
    result = generator(full_prompt, max_new_tokens=400, temperature=0.7, do_sample=True)
    text = result[0]["generated_text"]

    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–µ—Ä: –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ –ø–µ—Ä–≤–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏, –ø–æ—Ç–æ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
    parts = text.split("\n\n")
    description = parts[0].strip() if parts else ""
    keywords = []
    if len(parts) > 1:
        keywords = [
            kw.strip().lower()
            for kw in parts[1].replace("\n", " ").split(",")
            if kw.strip()
        ]

    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {description[:60]}...")
    print(f"‚úÖ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords)}")

    return {
        "title": description[:80].strip().capitalize(),
        "description": description,
        "keywords": keywords[:49],
    }


def generate_metadata_with_prompt(prompt: str, caption: str, **kwargs) -> dict:
    """
    –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å—Ç–∞—Ä–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏.
    –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—ã–µ –¥–æ–ø. –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, file_name),
    —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
    """
    return generate_keywords_with_prompt(prompt, caption, **kwargs)
